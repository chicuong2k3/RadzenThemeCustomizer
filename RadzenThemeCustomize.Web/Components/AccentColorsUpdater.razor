@using RadzenThemeCustomizer.Web

@inherits TimeWarp.State.TimeWarpStateComponent


<RadzenFieldset Text="Accent Color Palette">
    <RadzenRow>
        <RadzenColumn Size="12">
            <RadzenStack Gap="0">
                <RadzenRow AlignItems="AlignItems.Center" Gap="4px">
                    <RadzenColumn Size="6">
                        <RadzenFormField Text="Base Color" Style="width: 100%">
                            <RadzenColorPicker Value="@ThemeState.BaseColor" ShowColors="false"
                                               ValueChanged="@((string color) => DebouncedDispatch("rz-base", color))" />
                        </RadzenFormField>
                    </RadzenColumn>
                    <RadzenColumn Size="6">
                        <RadzenAlert Size="AlertSize.ExtraSmall" AlertStyle="AlertStyle.Primary" Style="background: var(--rz-base)" Variant="Variant.Flat" ShowIcon="false" Title=".rz-base" AllowClose="false" />
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow AlignItems="AlignItems.Center" Gap="4px">
                    <RadzenColumn Size="6">
                        <RadzenFormField Text="Primary Color" Style="width: 100%">
                            <RadzenColorPicker Value="@ThemeState.PrimaryColor" ShowColors="false"
                                               ValueChanged="@((string color) => DebouncedDispatch("rz-primary", color))" />
                        </RadzenFormField>
                    </RadzenColumn>
                    <RadzenColumn Size="6">
                        <RadzenAlert Size="AlertSize.ExtraSmall" AlertStyle="AlertStyle.Primary" Variant="Variant.Flat" ShowIcon="false" Title=".rz-primary" AllowClose="false" />
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow AlignItems="AlignItems.Center" Gap="4px">
                    <RadzenColumn Size="6">
                        <RadzenFormField Text="Secondary Color" Style="width: 100%">
                            <RadzenColorPicker Value="@ThemeState.SecondaryColor" ShowColors="false"
                                               ValueChanged="@((string color) => DebouncedDispatch("rz-secondary", color))" />
                        </RadzenFormField>
                    </RadzenColumn>
                    <RadzenColumn Size="6">
                        <RadzenAlert Size="AlertSize.ExtraSmall" AlertStyle="AlertStyle.Secondary" Variant="Variant.Flat" ShowIcon="false" Title=".rz-secondary" AllowClose="false" />
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow AlignItems="AlignItems.Center" Gap="4px">
                    <RadzenColumn Size="6">
                        <RadzenFormField Text="Info Color" Style="width: 100%">
                            <RadzenColorPicker Value="@ThemeState.InfoColor" ShowColors="false"
                                               ValueChanged="@((string color) => DebouncedDispatch("rz-info", color))" />
                        </RadzenFormField>
                    </RadzenColumn>
                    <RadzenColumn Size="6">
                        <RadzenAlert Size="AlertSize.ExtraSmall" AlertStyle="AlertStyle.Info" Variant="Variant.Flat" ShowIcon="false" Title=".rz-info" AllowClose="false" />
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow AlignItems="AlignItems.Center" Gap="4px">
                    <RadzenColumn Size="6">
                        <RadzenFormField Text="Success Color" Style="width: 100%">
                            <RadzenColorPicker Value="@ThemeState.SuccessColor" ShowColors="false"
                                               ValueChanged="@((string color) => DebouncedDispatch("rz-success", color))" />
                        </RadzenFormField>
                    </RadzenColumn>
                    <RadzenColumn Size="6">
                        <RadzenAlert Size="AlertSize.ExtraSmall" AlertStyle="AlertStyle.Success" Variant="Variant.Flat" ShowIcon="false" Title=".rz-success" AllowClose="false" />
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow AlignItems="AlignItems.Center" Gap="4px">
                    <RadzenColumn Size="6">
                        <RadzenFormField Text="Warning Color" Style="width: 100%">
                            <RadzenColorPicker Value="@ThemeState.WarningColor" ShowColors="false"
                                               ValueChanged="@((string color) => DebouncedDispatch("rz-warning", color))" />
                        </RadzenFormField>
                    </RadzenColumn>
                    <RadzenColumn Size="6">
                        <RadzenAlert Size="AlertSize.ExtraSmall" AlertStyle="AlertStyle.Warning" Variant="Variant.Flat" ShowIcon="false" Title=".rz-warning" AllowClose="false" />
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow AlignItems="AlignItems.Center" Gap="4px">
                    <RadzenColumn Size="6">
                        <RadzenFormField Text="Danger Color" Style="width: 100%">
                            <RadzenColorPicker Value="@ThemeState.DangerColor" ShowColors="false"
                                               ValueChanged="@((string color) => DebouncedDispatch("rz-danger", color))" />
                        </RadzenFormField>
                    </RadzenColumn>
                    <RadzenColumn Size="6">
                        <RadzenAlert Size="AlertSize.ExtraSmall" AlertStyle="AlertStyle.Danger" Variant="Variant.Flat" ShowIcon="false" Title=".rz-danger" AllowClose="false" />
                    </RadzenColumn>
                </RadzenRow>
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
</RadzenFieldset>



@code {
    private ThemeState ThemeState => GetState<ThemeState>();

    private readonly Dictionary<string, CancellationTokenSource> debounceTokens = new();
    private void DebouncedDispatch(string variable, string value, int delay = 100)
    {
        if (debounceTokens.TryGetValue(variable, out var existingToken))
        {
            existingToken.Cancel();
            existingToken.Dispose();
        }

        var cts = new CancellationTokenSource();
        debounceTokens[variable] = cts;

        _ = Task.Run(async () =>
        {
            try
            {
                await Task.Delay(delay, cts.Token);
                await ThemeState.ChangeAccentColor(variable, value);
            }
            catch (TaskCanceledException) { }
        });
    }

    public override void Dispose()
    {
        foreach (var cts in debounceTokens.Values)
        {
            cts.Cancel();
            cts.Dispose();
        }
        debounceTokens.Clear();
    }
}