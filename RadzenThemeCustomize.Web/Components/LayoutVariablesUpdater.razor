@using RadzenThemeCustomizer.Web
@inherits TimeWarp.State.TimeWarpStateComponent
@inject ColorVariableService ColorVariableService

<RadzenFieldset Text="Layout & Typography Variables">
    <RadzenRow>
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenStack Gap="4px">
                @foreach (var variable in ThemeState.LayoutVariables.Take(5))
                {
                    <RadzenRow>
                        <RadzenColumn Size="9" SizeMD="6">
                            <RadzenFormField Text="@ToLabel(variable.Key)" Style="width: 100%">
                                @if (variable.Key == "rz-text-font-family")
                                {
                                    <RadzenTextBox Value="@ThemeState.LayoutVariables[variable.Key].Value"
                                                   ValueChanged="@((string value) => DebouncedDispatch(variable.Key, value))" />
                                }
                                else if (variable.Key == "rz-outline-color" || variable.Key == "rz-body-background-color")
                                {
                                    <RadzenDropDown Value="@ThemeState.LayoutVariables[variable.Key].Value"
                                                    ValueChanged="@((string value) => DebouncedDispatch(variable.Key, value))"
                                                    Data="@availableVariables"
                                                    TextProperty="DisplayName"
                                                    ValueProperty="VariableName" />
                                }
                                else
                                {
                                    <RadzenNumeric Value="@ThemeState.LayoutVariables[variable.Key].Value" Min="0"
                                                   ValueChanged="@((string value) => DebouncedDispatch(variable.Key, value))" />
                                }
                            </RadzenFormField>
                        </RadzenColumn>
                        <RadzenColumn Size="3" SizeMD="6">
                            @if (variable.Key != "rz-text-font-family" && variable.Key != "rz-body-line-height"
                                                    && variable.Key != "rz-outline-color" && variable.Key != "rz-body-background-color")
                            {
                                <RadzenFormField Text="Unit" Style="width: 100%">
                                    @if (variable.Key == "rz-body-font-size")
                                    {
                                        <RadzenDropDown @bind-Value="@ThemeState.LayoutVariables[variable.Key].Unit" Data="@(new string[] { "px", "rem" })" />
                                    }
                                    else if (variable.Key == "rz-root-font-size" || variable.Key == "rz-border-width" || variable.Key == "rz-border-radius" || variable.Key == "rz-outline-offset" || variable.Key == "rz-outline-width")
                                    {
                                        <RadzenTextBox @bind-Value="@ThemeState.LayoutVariables[variable.Key].Unit" Disabled="true" />
                                    }
                                </RadzenFormField>
                            }

                        </RadzenColumn>
                    </RadzenRow>
                }
            </RadzenStack>
        </RadzenColumn>

        <RadzenColumn Size="12" SizeMD="6">
            <RadzenStack Gap="4px">
                @foreach (var variable in ThemeState.LayoutVariables.Skip(5))
                {
                    <RadzenRow>
                        <RadzenColumn Size="9" SizeMD="6">
                            <RadzenFormField Text="@ToLabel(variable.Key)" Style="width: 100%">
                                @if (variable.Key == "rz-text-font-family")
                                {
                                    <RadzenTextBox Value="@ThemeState.LayoutVariables[variable.Key].Value"
                                                   ValueChanged="@((string value) => DebouncedDispatch(variable.Key, value))" />
                                }
                                else if (variable.Key == "rz-outline-color" || variable.Key == "rz-body-background-color")
                                {
                                    <RadzenDropDown Value="@ThemeState.LayoutVariables[variable.Key].Value"
                                                    ValueChanged="@((string value) => DebouncedDispatch(variable.Key, value))"
                                                    Data="@availableVariables"
                                                    TextProperty="DisplayName"
                                                    ValueProperty="VariableName" />
                                }
                                else
                                {
                                    <RadzenNumeric Value="@ThemeState.LayoutVariables[variable.Key].Value" Min="0"
                                                   ValueChanged="@((string value) => DebouncedDispatch(variable.Key, value))" />
                                }
                            </RadzenFormField>
                        </RadzenColumn>
                        <RadzenColumn Size="3" SizeMD="6">
                            @if (variable.Key != "rz-text-font-family" && variable.Key != "rz-body-line-height"
                                                    && variable.Key != "rz-outline-color" && variable.Key != "rz-body-background-color")
                            {
                                <RadzenFormField Text="Unit" Style="width: 100%">
                                    @if (variable.Key == "rz-body-font-size")
                                    {
                                        <RadzenDropDown @bind-Value="@ThemeState.LayoutVariables[variable.Key].Unit" Data="@(new string[] { "px", "rem" })" />
                                    }
                                    else if (variable.Key == "rz-root-font-size" || variable.Key == "rz-border-width" || variable.Key == "rz-border-radius" || variable.Key == "rz-outline-offset" || variable.Key == "rz-outline-width")
                                    {
                                        <RadzenTextBox @bind-Value="@ThemeState.LayoutVariables[variable.Key].Unit" Disabled="true" />
                                    }
                                </RadzenFormField>
                            }
                        </RadzenColumn>
                    </RadzenRow>
                }
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
</RadzenFieldset>

@code {

    private ThemeState ThemeState => GetState<ThemeState>();


    private List<VariableOption> availableVariables = new();

    protected override void OnInitialized()
    {
        availableVariables = ColorVariableService.GetColorVariables();
    }


    private string ToLabel(string variableKey)
    {
        return System.Globalization.CultureInfo.CurrentCulture.TextInfo
            .ToTitleCase(variableKey.Replace("rz-", "").Replace("-", " "));
    }

    private readonly Dictionary<string, CancellationTokenSource> debounceTokens = new();
    private void DebouncedDispatch(string variable, string value, int delay = 0)
    {
        if (debounceTokens.TryGetValue(variable, out var existingToken))
        {
            existingToken.Cancel();
            existingToken.Dispose();
        }

        var cts = new CancellationTokenSource();
        debounceTokens[variable] = cts;

        _ = Task.Run(async () =>
        {
            try
            {
                await Task.Delay(delay, cts.Token);
                await ThemeState.ChangeLayoutVariable(variable, new()
                {
                    Value = value,
                    Unit = ThemeState.LayoutVariables[variable].Unit,
                    IsVar = variable == "rz-outline-color" || variable == "rz-body-background-color"
                });
            }
            catch (TaskCanceledException) { }
        });
    }

    public override void Dispose()
    {
        foreach (var cts in debounceTokens.Values)
        {
            cts.Cancel();
            cts.Dispose();
        }
        debounceTokens.Clear();
    }
}