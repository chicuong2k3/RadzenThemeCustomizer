@using RadzenThemeCustomizer.Web
@inject ColorVariableService ColorVariableService
@inherits TimeWarp.State.TimeWarpStateComponent

<RadzenFieldset Text="Semantic Colors">
    <RadzenRow>
        <RadzenColumn Size="6">
            <RadzenStack Gap="4px">
                <RadzenRow>
                    @foreach (var kvp in ThemeState.SemanticColors.Take(5))
                    {
                        <RadzenColumn Size="12">
                            <RadzenFormField Text="@ToLabel(kvp.Key)" Style="width: 100%">
                                <RadzenDropDown Value="@ThemeState.SemanticColors[kvp.Key]"
                                                ValueChanged="@((string value) => DebouncedDispatch(kvp.Key, value))"
                                                Data="@availableVariables"
                                                TextProperty="DisplayName"
                                                ValueProperty="VariableName" />
                            </RadzenFormField>
                        </RadzenColumn>
                    }
                </RadzenRow>
            </RadzenStack>
        </RadzenColumn>
        <RadzenColumn Size="6">
            <RadzenStack Gap="4px">
                <RadzenRow>
                    @foreach (var kvp in ThemeState.SemanticColors.Skip(5))
                    {
                        <RadzenColumn Size="12">
                            <RadzenFormField Text="@ToLabel(kvp.Key)" Style="width: 100%">
                                <RadzenDropDown Value="@ThemeState.SemanticColors[kvp.Key]"
                                                ValueChanged="@((string value) => DebouncedDispatch(kvp.Key, value))"
                                                Data="@availableVariables"
                                                TextProperty="DisplayName"
                                                ValueProperty="VariableName" />
                            </RadzenFormField>
                        </RadzenColumn>
                    }
                </RadzenRow>
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
</RadzenFieldset>

@code {

    private List<VariableOption> availableVariables = new();


    private ThemeState ThemeState => GetState<ThemeState>();

    protected override void OnInitialized()
    {
        availableVariables = ColorVariableService.GetColorVariables();
    }

    private string ToLabel(string variableKey)
    {
        return System.Globalization.CultureInfo.CurrentCulture.TextInfo
            .ToTitleCase(variableKey.Replace("rz-", "").Replace("-", " "));
    }

    private readonly Dictionary<string, CancellationTokenSource> debounceTokens = new();
    private void DebouncedDispatch(string variable, string value, int delay = 0)
    {
        if (debounceTokens.TryGetValue(variable, out var existingToken))
        {
            existingToken.Cancel();
            existingToken.Dispose();
        }

        var cts = new CancellationTokenSource();
        debounceTokens[variable] = cts;

        _ = Task.Run(async () =>
        {
            try
            {
                await Task.Delay(delay, cts.Token);
                await ThemeState.ChangeSemanticColor(variable, value);
            }
            catch (TaskCanceledException) { }
        });
    }

    public override void Dispose()
    {
        foreach (var cts in debounceTokens.Values)
        {
            cts.Cancel();
            cts.Dispose();
        }
        debounceTokens.Clear();
    }
}