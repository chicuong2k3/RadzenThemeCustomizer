@using RadzenThemeCustomizer.Web
@inherits TimeWarp.State.TimeWarpStateComponent

<RadzenFieldset Text="Series Color Palette">
    <RadzenRow>
        <RadzenColumn Size="12" SizeMD="4">
            <RadzenStack Gap="0">
                @foreach (var kvp in ThemeState.SeriesColors.Take(8))
                {
                    <RadzenRow AlignItems="AlignItems.Center" Gap="4px">
                        <RadzenColumn Size="6">
                            <RadzenFormField Text="@($"{kvp.Key.Replace("rz-", "").Replace("series-", "Series ")} Color")" Style="width: 100%">
                                <RadzenColorPicker Value="@ThemeState.SeriesColors[kvp.Key]" ShowColors="false"
                                                   ValueChanged="@((string c) => DebouncedDispatch(kvp.Key, c))" />
                            </RadzenFormField>
                        </RadzenColumn>
                        <RadzenColumn Size="6">
                            <RadzenAlert Style="@($"background: var(--{kvp.Key})")" AlertStyle="AlertStyle.Primary" Size="AlertSize.ExtraSmall" Variant="Variant.Flat" ShowIcon="false" AllowClose="false" Title="@($".rz-background-color-{kvp.Key.Replace("rz-", "")}")" />
                        </RadzenColumn>
                    </RadzenRow>
                }
            </RadzenStack>
        </RadzenColumn>

        <!-- Second Column: Next 8 Color Pickers and Alerts -->
        <RadzenColumn Size="12" SizeMD="4">
            <RadzenStack Gap="0">
                @foreach (var kvp in ThemeState.SeriesColors.Skip(8).Take(8))
                {
                    <RadzenRow AlignItems="AlignItems.Center" Gap="4px">
                        <RadzenColumn Size="6">
                            <RadzenFormField Text="@($"{kvp.Key.Replace("rz-", "").Replace("series-", "Series ")} Color")" Style="width: 100%">
                                <RadzenColorPicker Value="@ThemeState.SeriesColors[kvp.Key]" ShowColors="false"
                                                   ValueChanged="@((string c) => DebouncedDispatch(kvp.Key, c))" />
                            </RadzenFormField>
                        </RadzenColumn>
                        <RadzenColumn Size="6">
                            <RadzenAlert Style="@($"background: var(--{kvp.Key})")" AlertStyle="AlertStyle.Primary" Size="AlertSize.ExtraSmall" Variant="Variant.Flat" ShowIcon="false" AllowClose="false" Title="@($".rz-background-color-{kvp.Key.Replace("rz-", "")}")" />
                        </RadzenColumn>
                    </RadzenRow>
                }
            </RadzenStack>
        </RadzenColumn>

        <!-- Third Column: Last 8 Color Pickers and Alerts -->
        <RadzenColumn Size="12" SizeMD="4">
            <RadzenStack Gap="0">
                @foreach (var kvp in ThemeState.SeriesColors.Skip(16).Take(8))
                {
                    <RadzenRow AlignItems="AlignItems.Center" Gap="4px">
                        <RadzenColumn Size="6">
                            <RadzenFormField Text="@($"{kvp.Key.Replace("rz-", "").Replace("series-", "Series ")} Color")" Style="width: 100%">
                                <RadzenColorPicker Value="@ThemeState.SeriesColors[kvp.Key]" ShowColors="false"
                                                   ValueChanged="@((string c) => DebouncedDispatch(kvp.Key, c))" />
                            </RadzenFormField>
                        </RadzenColumn>
                        <RadzenColumn Size="6">
                            <RadzenAlert Style="@($"background: var(--{kvp.Key})")" AlertStyle="AlertStyle.Primary" Size="AlertSize.ExtraSmall" Variant="Variant.Flat" ShowIcon="false" AllowClose="false" Title="@($".rz-background-color-{kvp.Key.Replace("rz-", "")}")" />
                        </RadzenColumn>
                    </RadzenRow>
                }
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
</RadzenFieldset>


@code {
    private ThemeState ThemeState => GetState<ThemeState>();

    private readonly Dictionary<string, CancellationTokenSource> debounceTokens = new();
    private void DebouncedDispatch(string variable, string value, int delay = 100)
    {
        if (debounceTokens.TryGetValue(variable, out var existingToken))
        {
            existingToken.Cancel();
            existingToken.Dispose();
        }

        var cts = new CancellationTokenSource();
        debounceTokens[variable] = cts;

        _ = Task.Run(async () =>
        {
            try
            {
                await Task.Delay(delay, cts.Token);
                await ThemeState.ChangeSeriesColor(variable, value);
            }
            catch (TaskCanceledException) { }
        });
    }

    public override void Dispose()
    {
        foreach (var cts in debounceTokens.Values)
        {
            cts.Cancel();
            cts.Dispose();
        }
        debounceTokens.Clear();
    }
}