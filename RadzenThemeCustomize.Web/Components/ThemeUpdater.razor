@using RadzenThemeCustomizer.Web
@inject ThemeManagerService ThemeManagerService
@inject IJSRuntime JSRuntime
@inject LayoutEventService EventService

<RadzenTabs RenderMode="TabRenderMode.Client" @bind-SelectedIndex="@selectedIndex">
    <Tabs>
        <RadzenTabsItem Text="COLOR PALLETE">
            <RadzenRow>
                <RadzenColumn Size="12" SizeMD="4">
                    <AccentColorsUpdater @ref="@accentColorsUpdater" />
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="8">
                    <BaseColorsUpdater @ref="@baseColorsUpdater" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow>
                <RadzenColumn Size="12">
                    <SeriesColorsUpdater @ref="@seriesColorsUpdater" />
                </RadzenColumn>
            </RadzenRow>
        </RadzenTabsItem>
        <RadzenTabsItem Text="THEME CONSTANTS">
            <RadzenRow>
                <RadzenColumn Size="12">
                    <LayoutVariablesUpdater @ref="@layoutVariablesUpdater" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow>
                <RadzenColumn Size="12">
                    <ShadowUpdater @ref="@shadowUpdater" />
                </RadzenColumn>
            </RadzenRow>
        </RadzenTabsItem>
        <RadzenTabsItem Text="SEMANTIC COLORS">
            <SemanticColorsUpdater @ref="@semanticColorsUpdater" />
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>

@code {
    private int selectedIndex = 0;

    private AccentColorsUpdater? accentColorsUpdater;
    private BaseColorsUpdater? baseColorsUpdater;
    private SeriesColorsUpdater? seriesColorsUpdater;
    private LayoutVariablesUpdater? layoutVariablesUpdater;
    private ShadowUpdater? shadowUpdater;
    private SemanticColorsUpdater? semanticColorsUpdater;

    public async Task ChangeThemeAsync()
    {
        try
        {
            var data = new Dictionary<string, string>();

            if (accentColorsUpdater != null)
            {
                var accentColors = accentColorsUpdater.GetAccentColors();
                data = data.Concat(accentColors).ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
            }

            if (baseColorsUpdater != null)
            {
                var baseColors = baseColorsUpdater.GetBaseColors();
                data = data.Concat(baseColors).ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
            }

            if (seriesColorsUpdater != null)
            {
                var seriesColors = seriesColorsUpdater.GetSeriesColors();
                data = data.Concat(seriesColors).ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
            }

            if (layoutVariablesUpdater != null)
            {
                var layoutVariables = layoutVariablesUpdater.GetLayoutVariables();
                data = data.Concat(layoutVariables).ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
            }

            if (shadowUpdater != null)
            {
                var shadowVariables = shadowUpdater.GetShadowVariables();
                data = data.Concat(shadowVariables).ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
            }

            if (semanticColorsUpdater != null)
            {
                var semanticColorVariables = semanticColorsUpdater.GetSemanticColors();
                data = data.Concat(semanticColorVariables).ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
            }

            await ThemeManagerService.UpdateThemeAsync(new()
            {
                Properties = data,
                ThemeName = EventService.CurrentTheme
            });
            string css = await ThemeManagerService.GetThemeCssAsync(new()
            {
                ThemeName = EventService.CurrentTheme
            });
            await JSRuntime.InvokeVoidAsync("injectCss", css);
            StateHasChanged();


        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating theme: {ex.Message}");
        }
    }
}